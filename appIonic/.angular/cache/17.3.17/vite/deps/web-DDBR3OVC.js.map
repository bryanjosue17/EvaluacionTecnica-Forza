{
  "version": 3,
  "sources": ["../../../../../node_modules/@capacitor/network/dist/esm/web.js"],
  "sourcesContent": ["import { WebPlugin } from '@capacitor/core';\nfunction translatedConnection() {\n    const connection = window.navigator.connection ||\n        window.navigator.mozConnection ||\n        window.navigator.webkitConnection;\n    let result = 'unknown';\n    const type = connection ? connection.type || connection.effectiveType : null;\n    if (type && typeof type === 'string') {\n        switch (type) {\n            // possible type values\n            case 'bluetooth':\n            case 'cellular':\n                result = 'cellular';\n                break;\n            case 'none':\n                result = 'none';\n                break;\n            case 'ethernet':\n            case 'wifi':\n            case 'wimax':\n                result = 'wifi';\n                break;\n            case 'other':\n            case 'unknown':\n                result = 'unknown';\n                break;\n            // possible effectiveType values\n            case 'slow-2g':\n            case '2g':\n            case '3g':\n                result = 'cellular';\n                break;\n            case '4g':\n                result = 'wifi';\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\nexport class NetworkWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleOnline = () => {\n            const connectionType = translatedConnection();\n            const status = {\n                connected: true,\n                connectionType: connectionType,\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        this.handleOffline = () => {\n            const status = {\n                connected: false,\n                connectionType: 'none',\n            };\n            this.notifyListeners('networkStatusChange', status);\n        };\n        if (typeof window !== 'undefined') {\n            window.addEventListener('online', this.handleOnline);\n            window.addEventListener('offline', this.handleOffline);\n        }\n    }\n    async getStatus() {\n        if (!window.navigator) {\n            throw this.unavailable('Browser does not support the Network Information API');\n        }\n        const connected = window.navigator.onLine;\n        const connectionType = translatedConnection();\n        const status = {\n            connected,\n            connectionType: connected ? connectionType : 'none',\n        };\n        return status;\n    }\n}\nconst Network = new NetworkWeb();\nexport { Network };\n"],
  "mappings": ";;;;;;;;AACA,SAAS,uBAAuB;AAC5B,QAAM,aAAa,OAAO,UAAU,cAChC,OAAO,UAAU,iBACjB,OAAO,UAAU;AACrB,MAAI,SAAS;AACb,QAAM,OAAO,aAAa,WAAW,QAAQ,WAAW,gBAAgB;AACxE,MAAI,QAAQ,OAAO,SAAS,UAAU;AAClC,YAAQ,MAAM;AAAA,MAEV,KAAK;AAAA,MACL,KAAK;AACD,iBAAS;AACT;AAAA,MACJ,KAAK;AACD,iBAAS;AACT;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,iBAAS;AACT;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,iBAAS;AACT;AAAA,MAEJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,iBAAS;AACT;AAAA,MACJ,KAAK;AACD,iBAAS;AACT;AAAA,MACJ;AACI;AAAA,IACR;AAAA,EACJ;AACA,SAAO;AACX;AACO,IAAM,aAAN,cAAyB,UAAU;AAAA,EACtC,cAAc;AACV,UAAM;AACN,SAAK,eAAe,MAAM;AACtB,YAAM,iBAAiB,qBAAqB;AAC5C,YAAM,SAAS;AAAA,QACX,WAAW;AAAA,QACX;AAAA,MACJ;AACA,WAAK,gBAAgB,uBAAuB,MAAM;AAAA,IACtD;AACA,SAAK,gBAAgB,MAAM;AACvB,YAAM,SAAS;AAAA,QACX,WAAW;AAAA,QACX,gBAAgB;AAAA,MACpB;AACA,WAAK,gBAAgB,uBAAuB,MAAM;AAAA,IACtD;AACA,QAAI,OAAO,WAAW,aAAa;AAC/B,aAAO,iBAAiB,UAAU,KAAK,YAAY;AACnD,aAAO,iBAAiB,WAAW,KAAK,aAAa;AAAA,IACzD;AAAA,EACJ;AAAA,EACM,YAAY;AAAA;AACd,UAAI,CAAC,OAAO,WAAW;AACnB,cAAM,KAAK,YAAY,sDAAsD;AAAA,MACjF;AACA,YAAM,YAAY,OAAO,UAAU;AACnC,YAAM,iBAAiB,qBAAqB;AAC5C,YAAM,SAAS;AAAA,QACX;AAAA,QACA,gBAAgB,YAAY,iBAAiB;AAAA,MACjD;AACA,aAAO;AAAA,IACX;AAAA;AACJ;AACA,IAAM,UAAU,IAAI,WAAW;",
  "names": []
}
